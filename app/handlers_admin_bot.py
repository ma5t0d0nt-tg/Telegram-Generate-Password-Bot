from aiogram import F, Router
from aiogram.types import Message, ReactionTypeEmoji
from aiogram.filters import Command
from aiogram.enums.parse_mode import ParseMode

import configparser
import os

from config.parser_config_admin import (get_status_bot, set_active_bot,
                                        set_inactive_bot, get_owner_user_id,
                                        set_len, set_size)
from sqlite import db_start, get_all_users, db_close

router = Router()


def check_user(user_id_message: int) -> bool:
    """
    –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–∞ –∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é –±–æ—Ç–æ–º –∏ –µ–≥–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
    :param user_id_message: int user_id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä—ã–π –ø–∏—à–µ—Ç –±–æ—Ç—É
    :return: true - –¥–∞–µ—Ç—Å—è –¥–æ—Å—Ç—É–ø –∫ —Ñ—É–Ω–∫—Ü–∏—è–º –±–æ—Ç–∞, false - –∑–∞–ø—Ä–µ—Ç
    """
    user_id_owner = get_owner_user_id()
    return user_id_message == user_id_owner


@router.message(Command("cmd"))
async def handler(message: Message):
    is_owner = check_user(user_id_message=message.from_user.id)
    if is_owner:
        str_f_cmd = (f"–°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞:\n\n"
                     f"/act - –∞–∫—Ç–∏–≤–∞—Ü–∏—è –±–æ—Ç–∞;\n"
                     f"/dis - –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏—è –±–æ—Ç–∞;\n"
                     f"/getstatus - –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –±–æ—Ç–∞;\n"
                     f"/getconfig - –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–∏–π —Ñ–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏;\n"
                     f"/getfiledbsize - –ø–æ–ª—É—á–∏—Ç—å —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö;\n"
                     f"/getusers - –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞–≤—à–∏—Ö—Å—è –±–æ—Ç–æ–º;\n"
                     f"len X - —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–æ–≤—É—é –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é –¥–ª–∏–Ω—É –ø–∞—Ä–æ–ª—è (–• - —á–∏—Å–ª–æ);\n"
                     f"size X - —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º—ã—Ö –ø–∞—Ä–æ–ª–µ–π –∑–∞ —Ä–∞–∑ (–• - —á–∏—Å–ª–æ);")
        emoji_got_it = ReactionTypeEmoji(emoji='üëç')
        await message.react(reaction=[emoji_got_it])
        await message.reply(text=str_f_cmd, parse_mode=ParseMode.MARKDOWN)


@router.message(Command("act"))
async def handler(message: Message):
    is_owner = check_user(user_id_message=message.from_user.id)
    if is_owner:
        set_active_bot()
        emoji_got_it = ReactionTypeEmoji(emoji='üëç')
        await message.react(reaction=[emoji_got_it])
        await message.reply(text="–ë–æ—Ç –≤–∫–ª—é—á–µ–Ω")


@router.message(Command("dis"))
async def handler(message: Message):
    is_owner = check_user(user_id_message=message.from_user.id)
    if is_owner:
        set_inactive_bot()
        emoji_got_it = ReactionTypeEmoji(emoji='üëç')
        await message.react(reaction=[emoji_got_it])
        await message.reply(text="–ë–æ—Ç –æ—Ç–∫–ª—é—á–µ–Ω")


@router.message(Command("getstatus"))
async def handler(message: Message):
    is_owner = check_user(user_id_message=message.from_user.id)
    if is_owner:
        current_status = int(get_status_bot())
        if current_status == 0:
            await message.reply(text="–ë–æ—Ç –æ—Ç–∫–ª—é—á–µ–Ω")
            emoji_got_it = ReactionTypeEmoji(emoji='üò¥')
            await message.react(reaction=[emoji_got_it])
        elif current_status == 1:
            await message.reply(text="–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç")
            emoji_got_it = ReactionTypeEmoji(emoji='üë®‚Äçüíª')
            await message.react(reaction=[emoji_got_it])


@router.message(Command("getconfig"))
async def handler(message: Message):
    is_owner = check_user(user_id_message=message.from_user.id)
    if is_owner:
        conf = configparser.ConfigParser()
        conf.read('config/config.ini')
        str_f = (f"[ACTIVE_BOT]:\n"
                 f"is_active_bot: {conf['ACTIVE_BOT']['is_active_bot']}\n\n"
                 f"[PARAMETERS_MAX]:\n"
                 f"len: {conf['PARAMETERS_MAX']['len']}\n"
                 f"size: {conf['PARAMETERS_MAX']['size']}")
        emoji_got_it = ReactionTypeEmoji(emoji='üëç')
        await message.react(reaction=[emoji_got_it])
        await message.reply(text=str_f)


@router.message(Command("getfiledbsize"))
async def handler(message: Message):
    is_owner = check_user(user_id_message=message.from_user.id)
    if is_owner:
        file_size_byte = os.path.getsize("users.db")
        file_size_kbyte = file_size_byte / 1024
        emoji_got_it = ReactionTypeEmoji(emoji='üëç')
        await message.react(reaction=[emoji_got_it])
        await message.reply(f"–†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {file_size_kbyte} –ö–ë")


@router.message(Command("getusers"))
async def handler(message: Message):
    is_owner = check_user(user_id_message=message.from_user.id)
    if is_owner:
        await db_start()
        users = await get_all_users()
        await db_close()
        for user in users:
            str_user = (f"Telegram id: {user[0]}\n"
                        f"Name: {user[1]}\n"
                        f"URL: {user[2]}")
            await message.reply(text=str_user)
        emoji_got_it = ReactionTypeEmoji(emoji='üëç')
        await message.react(reaction=[emoji_got_it])


@router.message(F.text.startswith("len"))
async def handler(message: Message):
    is_owner = check_user(user_id_message=message.from_user.id)
    if is_owner:
        lent = message.text.replace("len", "").strip()
        set_len(lent)
        emoji_got_it = ReactionTypeEmoji(emoji='üëç')
        await message.react(reaction=[emoji_got_it])
        await message.reply(text=f"–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ –æ–¥–Ω–æ–≥–æ –ø–∞—Ä–æ–ª—è –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ {lent}")


@router.message(F.text.startswith("size"))
async def handler(message: Message):
    is_owner = check_user(user_id_message=message.from_user.id)
    if is_owner:
        size = message.text.replace("size", "").strip()
        set_size(size)
        emoji_got_it = ReactionTypeEmoji(emoji='üëç')
        await message.react(reaction=[emoji_got_it])
        await message.reply(text=f"–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∑–∞ —Ä–∞–∑ –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ {size}")
