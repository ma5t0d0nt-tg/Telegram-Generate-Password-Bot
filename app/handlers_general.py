from aiogram import F, Router
from aiogram.types import Message, ReactionTypeEmoji
from aiogram.filters import Command
from aiogram.enums.parse_mode import ParseMode

import re
import random

from config.parser_config_admin import (get_status_bot, get_max_len, get_max_size)
from db.sqlite import db_start, add_user, db_close

router = Router()


@router.message(Command("start"))
async def handler(message: Message):
    await db_start()
    await add_user(user_id=message.from_user.id, name=message.from_user.full_name,
                   url="https://t.me/" + message.from_user.username if message.from_user.username != "" else "")
    await db_close()
    status = get_status_bot()
    if status == "1":
        await message.reply(text=f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {message.from_user.first_name}.\n"
                                 f"–Ø –±–æ—Ç, –ø—Ä–µ–¥–Ω–∞–∑–∞—á–µ–Ω–Ω—ã–π –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –±–µ–∑–æ–ø–∞—Å–Ω—ã—Ö –ø–∞—Ä–æ–ª–µ–π –≤ Telegram Messenger –¥–ª—è "
                                 f"—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–∞ —Å–∞–π—Ç–∞—Ö. –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–∞—Ä–æ–ª–∏ –Ω–∏–∫—É–¥–∞ –Ω–µ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è.")


@router.message(Command("author"))
async def handler(message: Message):
    status = get_status_bot()
    if status == "1":
        emoji_got_it = ReactionTypeEmoji(emoji='üë®‚Äçüíª')
        await message.react(reaction=[emoji_got_it])
        await message.reply(text=f"–°—Å—ã–ª–∫–∞ –Ω–∞ –∞–≤—Ç–æ—Ä–∞ –¥–∞–Ω–Ω–æ–≥–æ –±–æ—Ç–∞\nhttps://t.me/m/-kwpIKrTMzIy")


@router.message(Command("pic"))
async def handler(message: Message):
    status = get_status_bot()
    if status == "1":
        await message.reply(
            text=f"–°—Å—ã–ª–∫–∞ –Ω–∞ –∞–≤–∞—Ç–∞—Ä –±–æ—Ç–∞:\nhttps://in.pinterest.com/pin/805862927053104693/")


@router.message(Command("description"))
async def handler(message: Message):
    status = get_status_bot()
    if status == "1":
        await message.reply(text="–≠—Ç–æ—Ç –±–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–∞–∫ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Å–ª–æ–∂–Ω—ã—Ö –ø–∞—Ä–æ–ª–µ–π.\n"
                                 "–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–∏–º–µ—Ä–æ–≤, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /example_gen_pass")


@router.message(Command("example_gen_pass"))
async def handler(message: Message):
    status = get_status_bot()
    if status == "1":
        example_tmp = (f"üí†–ü—Ä–∏–º–µ—Ä—ã **–ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö** —à–∞–±–ª–æ–Ω–æ–≤:\n"
                       f"üëâ`pass l8 AZ az 09 !@ n10` - —Å–≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø–∞—Ä–æ–ª—å –¥–ª–∏–Ω–æ–π 8 —Å–∏–º–≤–æ–ª–æ–≤ –∏–∑ "
                       f"–∑–∞–≥–ª–∞–≤–Ω—ã—Ö, –ø—Ä–æ–ø–∏—Å–Ω—ã—Ö, —Ü–∏—Ñ—Ä –∏ —Å–ø–µ—Ü. —Å–∏–º–≤–æ–ª–æ–≤. "
                       f"–¢–∞–∫–∏—Ö –ø–∞—Ä–æ–ª–µ–π –±—É–¥–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ - 10 —à—Ç—É–∫.\n"
                       f"üëâ`pass l5 AZ az -09 -!@ n15` - —Å–≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø–∞—Ä–æ–ª—å –¥–ª–∏–Ω–æ–π 5 —Å–∏–º–≤–æ–ª–æ–≤ –∏–∑ "
                       f"–∑–∞–≥–ª–∞–≤–Ω—ã—Ö –∏ –ø—Ä–æ–ø–∏—Å–Ω—ã—Ö."
                       f"–¢–∞–∫–∏—Ö –ø–∞—Ä–æ–ª–µ–π –±—É–¥–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ - 15 —à—Ç—É–∫.\n\n"
                       f"üí†–ü—Ä–∏–º–µ—Ä—ã **–Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö** —à–∞–±–ª–æ–Ω–æ–≤:\n"
                       f"üëâ`pass l8 -AZ -az -09 -!@ n10` - –ø—Ä–∏ –∑–∞–¥–∞–Ω–∏–∏ —Ç–∞–∫–æ–≥–æ —à–∞–±–ª–æ–Ω–∞, –±–æ—Ç –≤—ã–¥–∞—Å—Ç –æ—à–∏–±–∫—É, –ø–æ—Ç–æ–º—É —á—Ç–æ –≤—Å–µ "
                       f"–ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏—Å–∫–ª—é—á–µ–Ω—ã –∏–∑ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–∞—Ä–æ–ª—è.\n"
                       f"üëâ`pass lr -uZ -a7 -9 - n10=` - —Ç–∞–∫–æ–π —à–∞–±–ª–æ–Ω –Ω–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π:\n"
                       f"–≤–º–µ—Å—Ç–æ –¥–ª–∏–Ω—ã, —Å—Ç–æ–∏—Ç –±—É–∫–≤–∞;\n"
                       f"–µ—Å–ª–∏ –Ω—É–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å, —á—Ç–æ–±—ã –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–æ–≤–∞–ª–∏ –∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–æ–≤–∞–ª–∏ –∑–∞–≥–ª–∞–≤–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã, –Ω—É–∂–Ω–æ —É–∫–∞–∑—ã–≤–∞—Ç—å 'AZ' –∏–ª–∏ '-AZ';\n"
                       f"—Å –ø—Ä–æ–ø–∏—Å–Ω—ã–º–∏ —Å–∏–º–≤–æ–ª–∞–º–∏ –∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ –∑–∞–≥–ª–∞–≤–Ω—ã–º;\n"
                       f"–µ—Å–ª–∏ –Ω—É–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å, —á—Ç–æ –Ω—É–∂–Ω—ã –∏–ª–∏ –Ω–µ –Ω—É–∂–Ω—ã —Ü–∏—Ñ—Ä—ã –≤ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏, —Ç–æ —à–∞–±–ª–æ–Ω –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å '09' –∏–ª–∏ '-09', –¥–ª—è –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ –¥–æ–ª–∂–Ω—ã –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –æ–±–µ —Ü–∏—Ñ—Ä—ã;\n"
                       f"–≤–º–µ—Å—Ç–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ –Ω–µ –º–æ–∂–µ—Ç —Å—Ç–æ—è—Ç—å –ø—Ä–æ—á–µ—Ä–∫;\n"
                       f"–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ —à–∞–±–ª–æ–Ω—ã –Ω–µ –≤—ã–¥–∞–¥—É—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç.\n\n"
                       f"‚ÄºÔ∏è‚ÄºÔ∏è***–ü–†–ò–ú–ï–ß–ê–ù–ò–ï***‚ÄºÔ∏è‚ÄºÔ∏è\n"
                       f"–°–æ–∑–¥–∞–Ω–Ω—ã–π –ø–∞—Ä–æ–ª—å –º–æ–∂–Ω–æ —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –Ω–∞–∂–∞—Ç–∏–µ–º –Ω–∞ –ª—é–±–æ–π –ø–∞—Ä–æ–ª—å. –û–Ω –¥–æ–±–∞–≤–∏—Ç—Å—è –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞.\n"
                       f"–°–∏–º–≤–æ–ª '-' –ø–µ—Ä–µ–¥ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º –≤ —à–∞–±–ª–æ–Ω–µ, –æ–∑–Ω–∞—á–∞–µ—Ç, —á—Ç–æ –æ–Ω –Ω–µ –±—É–¥–µ—Ç –≤–∫–ª—é—á–µ–Ω –≤ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –ø–∞—Ä–æ–ª—è.\n")
        await message.reply(text=example_tmp, parse_mode=ParseMode.MARKDOWN)


@router.message(F.text.startswith("pass"))
async def handler(message: Message):
    status = get_status_bot()
    if status == "1":
        text = re.sub(r'\s+', ' ', message.text.replace("pass", "").strip())
        arr_parameters = text.split(" ")

        if len(arr_parameters) == 6:

            ascii_uppercase = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
            ascii_lowercase = "abcdefghijklmnopqrstuvwxyz"
            digits = "0123456789"
            punctuation = "!#$%&'()*+,-./:;<=>?@[\\]^_{|}~"

            size_pass = arr_parameters[0]
            uppercase = arr_parameters[1]
            lowercase = arr_parameters[2]
            digit = arr_parameters[3]
            special_characters = arr_parameters[4]
            count = arr_parameters[5]

            str_description_template = "–®–∞–±–ª–æ–Ω –±—ã–ª —Å–æ—Å—Ç–∞–≤–ª–µ–Ω –∏–∑: "
            arr_description_template = []

            if size_pass.startswith("l"):
                size_pass = size_pass.replace("l", "")
                if size_pass.isdigit():
                    size_pass = int(size_pass)
                    max_len = get_max_len()
                    if size_pass < 1:
                        size_pass = 1
                    if size_pass > max_len:
                        size_pass = max_len

            if uppercase == "AZ":
                uppercase = True
                arr_description_template.append("–∑–∞–≥–ª–∞–≤–Ω—ã—Ö –±—É–∫–≤")
            elif uppercase == "-AZ":
                uppercase = False
            else:
                uppercase = False

            if lowercase == "az":
                lowercase = True
                arr_description_template.append("–ø—Ä–æ–ø–∏—Å–Ω—ã—Ö –±—É–∫–≤")
            elif lowercase == "-az":
                lowercase = False
            else:
                lowercase = False

            if digit == "09":
                digit = True
                arr_description_template.append("—Ü–∏—Ñ—Ä")
            elif digit == "-09":
                digit = False
            else:
                digit = False

            if special_characters == "!@":
                special_characters = True
                arr_description_template.append("—Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤")
            elif special_characters == "-!@":
                special_characters = False
            else:
                special_characters = False

            if count.startswith("n"):
                count = count.replace("n", "")
                if count.isdigit():
                    count = int(count)
                    max_size = get_max_size()
                    if count > max_size:
                        count = max_size
                    if count < 1:
                        count = 1

            if ((uppercase + lowercase + digit + special_characters > 0) and
                    isinstance(size_pass, int) and isinstance(count, int)):

                str_tmp = ((ascii_uppercase if uppercase else "") + (ascii_lowercase if lowercase else "") +
                           (digits if digit else "") + (punctuation if special_characters else ""))

                arr_gen_pass = []

                for c in range(count):
                    ps = ""
                    for s in range(size_pass):
                        ps += random.choice(str_tmp)
                    arr_gen_pass.append(str(c + 1) + ": `" + ps + "`")

                await message.reply(text=f"–ù–∞–±–æ—Ä –ø–∞—Ä–æ–ª–µ–π –ø–æ —à–∞–±–ª–æ–Ω—É\n`{text}` üëá", parse_mode=ParseMode.MARKDOWN)
                await message.reply(text=str_description_template + ", ".join(arr_description_template) + "\n\n" +
                                         f"–î–ª–∏–Ω–∞ –ø–∞—Ä–æ–ª–µ–π: {size_pass}.\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Ä–æ–ª–µ–π: {count}")
                await message.reply(text="\n\n".join(arr_gen_pass), parse_mode=ParseMode.MARKDOWN)
                emoji_got_it = ReactionTypeEmoji(emoji='üëç')
                await message.react(reaction=[emoji_got_it])

            else:
                await message.reply("–í —à–∞–±–ª–æ–Ω–µ –¥–æ–ø—É—â–µ–Ω–∞ –æ—à–∏–±–∫–∞.\n"
                                    "–°–º–æ—Ç—Ä–∏—Ç–µ –ø—Ä–∏–º–µ—Ä—ã —Å–æ–∑–¥–∞–Ω–∏—è –ø–∞—Ä–æ–ª–µ–π –∫–æ–º–∞–Ω–¥–æ–π /example_gen_pass")
                emoji_got_it = ReactionTypeEmoji(emoji='üëé')
                await message.react(reaction=[emoji_got_it])

        else:
            await message.reply("–í —à–∞–±–ª–æ–Ω–µ –¥–æ–ø—É—â–µ–Ω–∞ –æ—à–∏–±–∫–∞.\n"
                                "–°–º–æ—Ç—Ä–∏—Ç–µ –ø—Ä–∏–º–µ—Ä—ã —Å–æ–∑–¥–∞–Ω–∏—è –ø–∞—Ä–æ–ª–µ–π –∫–æ–º–∞–Ω–¥–æ–π /example_gen_pass")
            emoji_got_it = ReactionTypeEmoji(emoji='üëé')
            await message.react(reaction=[emoji_got_it])
